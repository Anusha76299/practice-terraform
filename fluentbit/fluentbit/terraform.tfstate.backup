{
  "version": 4,
  "terraform_version": "1.3.5",
  "serial": 321,
  "lineage": "1df7fe22-b60b-e0d5-54e5-ad555d5d6dfb",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "aws_eks_cluster",
      "name": "example",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:eks:us-east-1:620599372895:cluster/demo1",
            "certificate_authority": [
              {
                "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1ERXdPVEEyTURReE1sb1hEVE16TURFd05qQTJNRFF4TWxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUGcyCjFpK25CQ1BKa09oZlVKNkgrRGVTU3pFdHV4V3M5VlhDbUdUWGNjUzBkbStrck11bUI2WS9EajlBSmpSUFQ2dXEKNWFaem94dFNjYUM1dytTTEluN0NKencvR3MwQ2I2cTZxUlp6TmZYaDZDRjl2TzJ6dThnN1p2M1NybzB5TFBoUgpZZkphdDdvYzBSaFl1T3FPUmY2aUd4UGdqU2VJT0lYSk9pUHRVcEtuc0YwemlCRFJlRytOWUtNVjNPMC9rcWhpCmhXdnljYnR3Wm8xclpONUdVeWQ5RUhKSVdSUHlWc3ZGdlRmRXk0N0ZnWUhIRE5UU3BXQlZrenRGRW9GOWR1dzAKWGVLd1VJRzYwLzU2eWw4cEVjRElOMWhLWHI1bXRhUmdQdWxHdGJURWVNZWVReXBRWFpEVmRSQmI2UXUrZERmNgpKY3lIZUFWcVF1UTdTQWJMY21NQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZEV25KRXRKcVRId01JYi9DdEp1K2FnR2pTdUtNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQkxSSGZDQUlvVmtJVjJGTnN4VApZRXFlQlNTM2pXbWtTRWNXcmZSYm9BYW8veC8razlkZG5pMHJ5WjBhd0tTaDdob0xIakpnYUtxd0tySHdKNUNSCkhhVEdxYjhqSUhxMnVjWGVlT0tJamx6MjFJNmZaeDFEQTlmRUYwaEZ4Qk43QjhmV281elZFeCsvaXhCdU9mSGsKUkJZaStQSDd5VVViTFFEdzFsSEdGeVg5djZZQmg2bmJ4K2pmYWdhZHB4ajNXZ0Q2ci80SXZqOGtvZ21LREFiRApaYjhabVVQUHAzaXhpQjZmMUtiQ2ZoNjlxTU1VOE8zZ2ZiMkwveXZPYTg0QmNqeHc2VHpCbDArTStycnBEZXI1CmpmOVRISlZCREphWVR0OWlKaGIrRGJkTG4yZjRPdDZCT3MrZS83ZDUwN2R4NlN0K1pDRWJ2bkdXeHgxSFUyU04KTE1rPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
              }
            ],
            "created_at": "2023-01-09 05:58:04.211 +0000 UTC",
            "enabled_cluster_log_types": [],
            "endpoint": "https://44113DFEF26D1009FB63CC9476FDA7EA.gr7.us-east-1.eks.amazonaws.com",
            "id": "demo1",
            "identity": [
              {
                "oidc": [
                  {
                    "issuer": "https://oidc.eks.us-east-1.amazonaws.com/id/44113DFEF26D1009FB63CC9476FDA7EA"
                  }
                ]
              }
            ],
            "kubernetes_network_config": [
              {
                "ip_family": "ipv4",
                "service_ipv4_cidr": "172.20.0.0/16",
                "service_ipv6_cidr": ""
              }
            ],
            "name": "demo1",
            "outpost_config": [],
            "platform_version": "eks.5",
            "role_arn": "arn:aws:iam::620599372895:role/eks-cluster-demo1",
            "status": "ACTIVE",
            "tags": {},
            "version": "1.23",
            "vpc_config": [
              {
                "cluster_security_group_id": "sg-0d2d0a14f90460e11",
                "endpoint_private_access": false,
                "endpoint_public_access": true,
                "public_access_cidrs": [
                  "0.0.0.0/0"
                ],
                "security_group_ids": [],
                "subnet_ids": [
                  "subnet-062452285d5e34874",
                  "subnet-0b621165a5a5769cd"
                ],
                "vpc_id": "vpc-0c01d1e915f1fca6b"
              }
            ]
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_eks_cluster_auth",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "demo1",
            "name": "demo1",
            "token": "k8s-aws-v1.aHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbS8_QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNSZYLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFaQTdVMjVSUDRJS1BJSFZWJTJGMjAyMzAxMDklMkZ1cy1lYXN0LTElMkZzdHMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDIzMDEwOVQxMDAwMjNaJlgtQW16LUV4cGlyZXM9MCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QlM0J4LWs4cy1hd3MtaWQmWC1BbXotU2lnbmF0dXJlPWY2YjdiNjU2Y2JhYzVjYTgwMzZlNTYxNDE2MGRkMTI5NzRjZWYzNDFkM2RiMTM5NGM0YTU4MGYyOGQzNDlkYzE"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/api/v1/namespaces/amazon-cloudwatch",
            "ignore_fields": null,
            "kind": "Namespace",
            "live_manifest_incluster": "b95b11b4efb577c1bd8ede79d698ac8653ac3f7f5cd242adc040be1b0c488b92",
            "live_uid": "fc56dc60-4b5b-4e76-8e94-30556a77d8d4",
            "name": "amazon-cloudwatch",
            "namespace": null,
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "fc56dc60-4b5b-4e76-8e94-30556a77d8d4",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "# create amazon-cloudwatch namespace\r\napiVersion: v1\r\nkind: Namespace\r\nmetadata:\r\n  name: amazon-cloudwatch\r\n  labels:\r\n    name: amazon-cloudwatch\r\n---\r\n\r\n# create cwagent service account and role binding\r\napiVersion: v1\r\nkind: ServiceAccount\r\nmetadata:\r\n  name: cloudwatch-agent\r\n  namespace: amazon-cloudwatch\r\n\r\n---\r\nkind: ClusterRole\r\napiVersion: rbac.authorization.k8s.io/v1\r\nmetadata:\r\n  name: cloudwatch-agent-role\r\nrules:\r\n  - apiGroups: [\"\"]\r\n    resources: [\"pods\", \"nodes\", \"endpoints\"]\r\n    verbs: [\"list\", \"watch\"]\r\n  - apiGroups: [\"apps\"]\r\n    resources: [\"replicasets\"]\r\n    verbs: [\"list\", \"watch\"]\r\n  - apiGroups: [\"batch\"]\r\n    resources: [\"jobs\"]\r\n    verbs: [\"list\", \"watch\"]\r\n  - apiGroups: [\"\"]\r\n    resources: [\"nodes/proxy\"]\r\n    verbs: [\"get\"]\r\n  - apiGroups: [\"\"]\r\n    resources: [\"nodes/stats\", \"configmaps\", \"events\"]\r\n    verbs: [\"create\"]\r\n  - apiGroups: [\"\"]\r\n    resources: [\"configmaps\"]\r\n    resourceNames: [\"cwagent-clusterleader\"]\r\n    verbs: [\"get\",\"update\"]\r\n\r\n---\r\nkind: ClusterRoleBinding\r\napiVersion: rbac.authorization.k8s.io/v1\r\nmetadata:\r\n  name: cloudwatch-agent-role-binding\r\nsubjects:\r\n  - kind: ServiceAccount\r\n    name: cloudwatch-agent\r\n    namespace: amazon-cloudwatch\r\nroleRef:\r\n  kind: ClusterRole\r\n  name: cloudwatch-agent-role\r\n  apiGroup: rbac.authorization.k8s.io\r\n---\r\n\r\n# create configmap for cwagent config\r\napiVersion: v1\r\ndata:\r\n  # Configuration is in Json format. No matter what configure change you make,\r\n  # please keep the Json blob valid.\r\n  cwagentconfig.json: |\r\n    {\r\n      \"agent\": {\r\n        \"region\": \"{{region_name}}\"\r\n      },\r\n      \"logs\": {\r\n        \"metrics_collected\": {\r\n          \"kubernetes\": {\r\n            \"cluster_name\": \"{{cluster_name}}\",\r\n            \"metrics_collection_interval\": 60\r\n          }\r\n        },\r\n        \"force_flush_interval\": 5\r\n      }\r\n    }\r\nkind: ConfigMap\r\nmetadata:\r\n  name: cwagentconfig\r\n  namespace: amazon-cloudwatch\r\n---\r\n\r\n# deploy cwagent as daemonset\r\napiVersion: apps/v1\r\nkind: DaemonSet\r\nmetadata:\r\n  name: cloudwatch-agent\r\n  namespace: amazon-cloudwatch\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      name: cloudwatch-agent\r\n  template:\r\n    metadata:\r\n      labels:\r\n        name: cloudwatch-agent\r\n    spec:\r\n      containers:\r\n        - name: cloudwatch-agent\r\n          image: amazon/cloudwatch-agent:1.247354.0b251981\r\n          #ports:\r\n          #  - containerPort: 8125\r\n          #    hostPort: 8125\r\n          #    protocol: UDP\r\n          resources:\r\n            limits:\r\n              cpu:  200m\r\n              memory: 200Mi\r\n            requests:\r\n              cpu: 200m\r\n              memory: 200Mi\r\n          # Please don't change below envs\r\n          env:\r\n            - name: HOST_IP\r\n              valueFrom:\r\n                fieldRef:\r\n                  fieldPath: status.hostIP\r\n            - name: HOST_NAME\r\n              valueFrom:\r\n                fieldRef:\r\n                  fieldPath: spec.nodeName\r\n            - name: K8S_NAMESPACE\r\n              valueFrom:\r\n                fieldRef:\r\n                  fieldPath: metadata.namespace\r\n            - name: CI_VERSION\r\n              value: \"k8s/1.3.11\"\r\n          # Please don't change the mountPath\r\n          volumeMounts:\r\n            - name: cwagentconfig\r\n              mountPath: /etc/cwagentconfig\r\n            - name: rootfs\r\n              mountPath: /rootfs\r\n              readOnly: true\r\n            - name: dockersock\r\n              mountPath: /var/run/docker.sock\r\n              readOnly: true\r\n            - name: varlibdocker\r\n              mountPath: /var/lib/docker\r\n              readOnly: true\r\n            - name: containerdsock\r\n              mountPath: /run/containerd/containerd.sock\r\n              readOnly: true\r\n            - name: sys\r\n              mountPath: /sys\r\n              readOnly: true\r\n            - name: devdisk\r\n              mountPath: /dev/disk\r\n              readOnly: true\r\n      volumes:\r\n        - name: cwagentconfig\r\n          configMap:\r\n            name: cwagentconfig\r\n        - name: rootfs\r\n          hostPath:\r\n            path: /\r\n        - name: dockersock\r\n          hostPath:\r\n            path: /var/run/docker.sock\r\n        - name: varlibdocker\r\n          hostPath:\r\n            path: /var/lib/docker\r\n        - name: containerdsock\r\n          hostPath:\r\n            path: /run/containerd/containerd.sock\r\n        - name: sys\r\n          hostPath:\r\n            path: /sys\r\n        - name: devdisk\r\n          hostPath:\r\n            path: /dev/disk/\r\n      terminationGracePeriodSeconds: 60\r\n      serviceAccountName: cloudwatch-agent\r\n\r\n---\r\n\r\n# create configmap for cluster name and aws region for CloudWatch Logs\r\n# need to replace the placeholders {{cluster_name}} and {{region_name}}\r\n# and need to replace {{http_server_toggle}} and {{http_server_port}}\r\n# and need to replace {{read_from_head}} and {{read_from_tail}}\r\napiVersion: v1\r\ndata:\r\n  cluster.name: {{cluster_name}}\r\n  logs.region: {{region_name}}\r\n  http.server: {{http_server_toggle}}\r\n  http.port: {{http_server_port}}\r\n  read.head: {{read_from_head}}\r\n  read.tail: {{read_from_tail}}\r\nkind: ConfigMap\r\nmetadata:\r\n  name: fluent-bit-cluster-info\r\n  namespace: amazon-cloudwatch\r\n---\r\n\r\napiVersion: v1\r\nkind: ServiceAccount\r\nmetadata:\r\n  name: fluent-bit\r\n  namespace: amazon-cloudwatch\r\n---\r\napiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRole\r\nmetadata:\r\n  name: fluent-bit-role\r\nrules:\r\n  - nonResourceURLs:\r\n      - /metrics\r\n    verbs:\r\n      - get\r\n  - apiGroups: [\"\"]\r\n    resources:\r\n      - namespaces\r\n      - pods\r\n      - pods/logs\r\n      - nodes\r\n      - nodes/proxy\r\n    verbs: [\"get\", \"list\", \"watch\"]\r\n---\r\napiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRoleBinding\r\nmetadata:\r\n  name: fluent-bit-role-binding\r\nroleRef:\r\n  apiGroup: rbac.authorization.k8s.io\r\n  kind: ClusterRole\r\n  name: fluent-bit-role\r\nsubjects:\r\n  - kind: ServiceAccount\r\n    name: fluent-bit\r\n    namespace: amazon-cloudwatch\r\n---\r\napiVersion: v1\r\nkind: ConfigMap\r\nmetadata:\r\n  name: fluent-bit-config\r\n  namespace: amazon-cloudwatch\r\n  labels:\r\n    k8s-app: fluent-bit\r\ndata:\r\n  fluent-bit.conf: |\r\n    [SERVICE]\r\n        Flush                     5\r\n        Log_Level                 info\r\n        Daemon                    off\r\n        Parsers_File              parsers.conf\r\n        HTTP_Server               ${HTTP_SERVER}\r\n        HTTP_Listen               0.0.0.0\r\n        HTTP_Port                 ${HTTP_PORT}\r\n        storage.path              /var/fluent-bit/state/flb-storage/\r\n        storage.sync              normal\r\n        storage.checksum          off\r\n        storage.backlog.mem_limit 5M\r\n        \r\n    @INCLUDE application-log.conf\r\n    @INCLUDE dataplane-log.conf\r\n    @INCLUDE host-log.conf\r\n  \r\n  application-log.conf: |\r\n    [INPUT]\r\n        Name                tail\r\n        Tag                 application.*\r\n        Exclude_Path        /var/log/containers/cloudwatch-agent*, /var/log/containers/fluent-bit*, /var/log/containers/aws-node*, /var/log/containers/kube-proxy*\r\n        Path                /var/log/containers/*.log\r\n        Docker_Mode         On\r\n        Docker_Mode_Flush   5\r\n        Docker_Mode_Parser  container_firstline\r\n        Parser              docker\r\n        DB                  /var/fluent-bit/state/flb_container.db\r\n        Mem_Buf_Limit       50MB\r\n        Skip_Long_Lines     On\r\n        Refresh_Interval    10\r\n        Rotate_Wait         30\r\n        storage.type        filesystem\r\n        Read_from_Head      ${READ_FROM_HEAD}\r\n\r\n    [INPUT]\r\n        Name                tail\r\n        Tag                 application.*\r\n        Path                /var/log/containers/fluent-bit*\r\n        Parser              docker\r\n        DB                  /var/fluent-bit/state/flb_log.db\r\n        Mem_Buf_Limit       5MB\r\n        Skip_Long_Lines     On\r\n        Refresh_Interval    10\r\n        Read_from_Head      ${READ_FROM_HEAD}\r\n\r\n    [INPUT]\r\n        Name                tail\r\n        Tag                 application.*\r\n        Path                /var/log/containers/cloudwatch-agent*\r\n        Docker_Mode         On\r\n        Docker_Mode_Flush   5\r\n        Docker_Mode_Parser  cwagent_firstline\r\n        Parser              docker\r\n        DB                  /var/fluent-bit/state/flb_cwagent.db\r\n        Mem_Buf_Limit       5MB\r\n        Skip_Long_Lines     On\r\n        Refresh_Interval    10\r\n        Read_from_Head      ${READ_FROM_HEAD}\r\n\r\n    [FILTER]\r\n        Name                kubernetes\r\n        Match               application.*\r\n        Kube_URL            https://kubernetes.default.svc:443\r\n        Kube_Tag_Prefix     application.var.log.containers.\r\n        Merge_Log           On\r\n        Merge_Log_Key       log_processed\r\n        K8S-Logging.Parser  On\r\n        K8S-Logging.Exclude Off\r\n        Labels              Off\r\n        Annotations         Off\r\n        Use_Kubelet         On\r\n        Kubelet_Port        10250\r\n        Buffer_Size         0\r\n\r\n    [OUTPUT]\r\n        Name                cloudwatch_logs\r\n        Match               application.*\r\n        region              ${AWS_REGION}\r\n        log_group_name      /aws/containerinsights/${CLUSTER_NAME}/application\r\n        log_stream_prefix   ${HOST_NAME}-\r\n        auto_create_group   true\r\n        extra_user_agent    container-insights\r\n\r\n  dataplane-log.conf: |\r\n    [INPUT]\r\n        Name                systemd\r\n        Tag                 dataplane.systemd.*\r\n        Systemd_Filter      _SYSTEMD_UNIT=docker.service\r\n        Systemd_Filter      _SYSTEMD_UNIT=kubelet.service\r\n        DB                  /var/fluent-bit/state/systemd.db\r\n        Path                /var/log/journal\r\n        Read_From_Tail      ${READ_FROM_TAIL}\r\n\r\n    [INPUT]\r\n        Name                tail\r\n        Tag                 dataplane.tail.*\r\n        Path                /var/log/containers/aws-node*, /var/log/containers/kube-proxy*\r\n        Docker_Mode         On\r\n        Docker_Mode_Flush   5\r\n        Docker_Mode_Parser  container_firstline\r\n        Parser              docker\r\n        DB                  /var/fluent-bit/state/flb_dataplane_tail.db\r\n        Mem_Buf_Limit       50MB\r\n        Skip_Long_Lines     On\r\n        Refresh_Interval    10\r\n        Rotate_Wait         30\r\n        storage.type        filesystem\r\n        Read_from_Head      ${READ_FROM_HEAD}\r\n\r\n    [FILTER]\r\n        Name                modify\r\n        Match               dataplane.systemd.*\r\n        Rename              _HOSTNAME                   hostname\r\n        Rename              _SYSTEMD_UNIT               systemd_unit\r\n        Rename              MESSAGE                     message\r\n        Remove_regex        ^((?!hostname|systemd_unit|message).)*$\r\n\r\n    [FILTER]\r\n        Name                aws\r\n        Match               dataplane.*\r\n        imds_version        v1\r\n\r\n    [OUTPUT]\r\n        Name                cloudwatch_logs\r\n        Match               dataplane.*\r\n        region              ${AWS_REGION}\r\n        log_group_name      /aws/containerinsights/${CLUSTER_NAME}/dataplane\r\n        log_stream_prefix   ${HOST_NAME}-\r\n        auto_create_group   true\r\n        extra_user_agent    container-insights\r\n    \r\n  host-log.conf: |\r\n    [INPUT]\r\n        Name                tail\r\n        Tag                 host.dmesg\r\n        Path                /var/log/dmesg\r\n        Parser              syslog\r\n        DB                  /var/fluent-bit/state/flb_dmesg.db\r\n        Mem_Buf_Limit       5MB\r\n        Skip_Long_Lines     On\r\n        Refresh_Interval    10\r\n        Read_from_Head      ${READ_FROM_HEAD}\r\n\r\n    [INPUT]\r\n        Name                tail\r\n        Tag                 host.messages\r\n        Path                /var/log/messages\r\n        Parser              syslog\r\n        DB                  /var/fluent-bit/state/flb_messages.db\r\n        Mem_Buf_Limit       5MB\r\n        Skip_Long_Lines     On\r\n        Refresh_Interval    10\r\n        Read_from_Head      ${READ_FROM_HEAD}\r\n\r\n    [INPUT]\r\n        Name                tail\r\n        Tag                 host.secure\r\n        Path                /var/log/secure\r\n        Parser              syslog\r\n        DB                  /var/fluent-bit/state/flb_secure.db\r\n        Mem_Buf_Limit       5MB\r\n        Skip_Long_Lines     On\r\n        Refresh_Interval    10\r\n        Read_from_Head      ${READ_FROM_HEAD}\r\n\r\n    [FILTER]\r\n        Name                aws\r\n        Match               host.*\r\n        imds_version        v1\r\n\r\n    [OUTPUT]\r\n        Name                cloudwatch_logs\r\n        Match               host.*\r\n        region              ${AWS_REGION}\r\n        log_group_name      /aws/containerinsights/${CLUSTER_NAME}/host\r\n        log_stream_prefix   ${HOST_NAME}.\r\n        auto_create_group   true\r\n        extra_user_agent    container-insights\r\n\r\n  parsers.conf: |\r\n    [PARSER]\r\n        Name                docker\r\n        Format              json\r\n        Time_Key            time\r\n        Time_Format         %Y-%m-%dT%H:%M:%S.%LZ\r\n\r\n    [PARSER]\r\n        Name                syslog\r\n        Format              regex\r\n        Regex               ^(?\u003ctime\u003e[^ ]* {1,2}[^ ]* [^ ]*) (?\u003chost\u003e[^ ]*) (?\u003cident\u003e[a-zA-Z0-9_\\/\\.\\-]*)(?:\\[(?\u003cpid\u003e[0-9]+)\\])?(?:[^\\:]*\\:)? *(?\u003cmessage\u003e.*)$\r\n        Time_Key            time\r\n        Time_Format         %b %d %H:%M:%S\r\n\r\n    [PARSER]\r\n        Name                container_firstline\r\n        Format              regex\r\n        Regex               (?\u003clog\u003e(?\u003c=\"log\":\")\\S(?!\\.).*?)(?\u003c!\\\\)\".*(?\u003cstream\u003e(?\u003c=\"stream\":\").*?)\".*(?\u003ctime\u003e\\d{4}-\\d{1,2}-\\d{1,2}T\\d{2}:\\d{2}:\\d{2}\\.\\w*).*(?=})\r\n        Time_Key            time\r\n        Time_Format         %Y-%m-%dT%H:%M:%S.%LZ\r\n\r\n    [PARSER]\r\n        Name                cwagent_firstline\r\n        Format              regex\r\n        Regex               (?\u003clog\u003e(?\u003c=\"log\":\")\\d{4}[\\/-]\\d{1,2}[\\/-]\\d{1,2}[ T]\\d{2}:\\d{2}:\\d{2}(?!\\.).*?)(?\u003c!\\\\)\".*(?\u003cstream\u003e(?\u003c=\"stream\":\").*?)\".*(?\u003ctime\u003e\\d{4}-\\d{1,2}-\\d{1,2}T\\d{2}:\\d{2}:\\d{2}\\.\\w*).*(?=})\r\n        Time_Key            time\r\n        Time_Format         %Y-%m-%dT%H:%M:%S.%LZ\r\n---\r\napiVersion: apps/v1\r\nkind: DaemonSet\r\nmetadata:\r\n  name: fluent-bit\r\n  namespace: amazon-cloudwatch\r\n  labels:\r\n    k8s-app: fluent-bit\r\n    version: v1\r\n    kubernetes.io/cluster-service: \"true\"\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      k8s-app: fluent-bit\r\n  template:\r\n    metadata:\r\n      labels:\r\n        k8s-app: fluent-bit\r\n        version: v1\r\n        kubernetes.io/cluster-service: \"true\"\r\n    spec:\r\n      containers:\r\n      - name: fluent-bit\r\n        image: public.ecr.aws/aws-observability/aws-for-fluent-bit:stable\r\n        imagePullPolicy: Always\r\n        env:\r\n            - name: AWS_REGION\r\n              valueFrom:\r\n                configMapKeyRef:\r\n                  name: fluent-bit-cluster-info\r\n                  key: logs.region\r\n            - name: CLUSTER_NAME\r\n              valueFrom:\r\n                configMapKeyRef:\r\n                  name: fluent-bit-cluster-info\r\n                  key: cluster.name\r\n            - name: HTTP_SERVER\r\n              valueFrom:\r\n                configMapKeyRef:\r\n                  name: fluent-bit-cluster-info\r\n                  key: http.server\r\n            - name: HTTP_PORT\r\n              valueFrom:\r\n                configMapKeyRef:\r\n                  name: fluent-bit-cluster-info\r\n                  key: http.port\r\n            - name: READ_FROM_HEAD\r\n              valueFrom:\r\n                configMapKeyRef:\r\n                  name: fluent-bit-cluster-info\r\n                  key: read.head\r\n            - name: READ_FROM_TAIL\r\n              valueFrom:\r\n                configMapKeyRef:\r\n                  name: fluent-bit-cluster-info\r\n                  key: read.tail\r\n            - name: HOST_NAME\r\n              valueFrom:\r\n                fieldRef:\r\n                  fieldPath: spec.nodeName\r\n            - name: HOSTNAME\r\n              valueFrom:\r\n                fieldRef:\r\n                  apiVersion: v1\r\n                  fieldPath: metadata.name\r\n            - name: CI_VERSION\r\n              value: \"k8s/1.3.11\"\r\n        resources:\r\n            limits:\r\n              memory: 200Mi\r\n            requests:\r\n              cpu: 500m\r\n              memory: 100Mi\r\n        volumeMounts:\r\n        # Please don't change below read-only permissions\r\n        - name: fluentbitstate\r\n          mountPath: /var/fluent-bit/state\r\n        - name: varlog\r\n          mountPath: /var/log\r\n          readOnly: true\r\n        - name: varlibdockercontainers\r\n          mountPath: /var/lib/docker/containers\r\n          readOnly: true\r\n        - name: fluent-bit-config\r\n          mountPath: /fluent-bit/etc/\r\n        - name: runlogjournal\r\n          mountPath: /run/log/journal\r\n          readOnly: true\r\n        - name: dmesg\r\n          mountPath: /var/log/dmesg\r\n          readOnly: true\r\n      terminationGracePeriodSeconds: 10\r\n      hostNetwork: true\r\n      dnsPolicy: ClusterFirstWithHostNet\r\n      volumes:\r\n      - name: fluentbitstate\r\n        hostPath:\r\n          path: /var/fluent-bit/state\r\n      - name: varlog\r\n        hostPath:\r\n          path: /var/log\r\n      - name: varlibdockercontainers\r\n        hostPath:\r\n          path: /var/lib/docker/containers\r\n      - name: fluent-bit-config\r\n        configMap:\r\n          name: fluent-bit-config\r\n      - name: runlogjournal\r\n        hostPath:\r\n          path: /run/log/journal\r\n      - name: dmesg\r\n        hostPath:\r\n          path: /var/log/dmesg\r\n      serviceAccountName: fluent-bit\r\n      tolerations:\r\n      - key: node-role.kubernetes.io/master\r\n        operator: Exists\r\n        effect: NoSchedule\r\n      - operator: \"Exists\"\r\n        effect: \"NoExecute\"\r\n      - operator: \"Exists\"\r\n        effect: \"NoSchedule\"",
            "yaml_body_parsed": "apiVersion: v1\nkind: Namespace\nmetadata:\n  labels:\n    name: amazon-cloudwatch\n  name: amazon-cloudwatch\n",
            "yaml_incluster": "b95b11b4efb577c1bd8ede79d698ac8653ac3f7f5cd242adc040be1b0c488b92"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "data.aws_eks_cluster.example",
            "data.aws_eks_cluster_auth.main",
            "null_resource.kube-config"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "example",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1835695814551531679",
            "triggers": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "kube-config",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "7907209780990248259",
            "triggers": null
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}
